(load "unit-test.rkt")


; <sign> ::= + | -
; <digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
; <number> ::= <digit> | <digit> <number>
; <frac> ::= <number> / <number> | <sign> <number> / <number>

  
(define (sign? a)
  (and (or (equal? a #\+) (equal? a #\-)) #t))

(define (digit? a)
  (and (> (char->integer a) 47) (< (char->integer a) 58)))

(define (digits-only? a)
  (cond ((null? a) #t)
        ((pair? a) (and (digit? (car a)) (digits-only? (cdr a))))
        (else (digit? a))))

(define (sep? a)
  (and (or (equal? a #\space) (equal? a #\tab) (equal? a #\newline)) #t))

(define (count item lst)
  (cond ((null? lst) 0)
        ((not (pair? lst)) (if (eq? lst item) 1 0))
        ((eq? (car lst) item) (+ 1 (count (cdr lst) item)))
        (else (count (cdr lst) item))))

(define (check-frac str)
  (define (parse str)
    (if (and (not (null? str)) ( (car str)))
        (parse (cdr str))
        (if (null? str)
            (= 1 1)
            (if (=? (car str) #\/ )
                (parse (cdr str))
                (= 1 2)))))
  (if (eq? (memq #\/ (string->list str)) #f)
      (memq #\/ (string->list str))
      (if (sign? (car (string->list str)))
          (parse (cdr (string->list str)))
          (parse (string->list str)))))

(define (scan-frac str)
  (define (parse-value str value)
    (if (and (not (null? str)) (digit? (car str)))
        (parse-value (cdr str) (append value (list (- (char->integer (car str)) 48))))
        value))
  (define (fold list value i)
    (if (not (null? list))
        (fold (cdr list) (+ value (* (car list) (expt 10 i))) (+ i 1))
        value))
  (if (not (check-frac str))
      #f
      (if (eq? (memq #\/ (string->list str)) #f)
          (memq #\/ (string->list str))
          (if (sign? (car (string->list str)))
              (if (eq? (car (string->list str)) #\+) 
                  (/ (fold (reverse (parse-value (cdr (string->list str)) '())) 0 0) (fold (reverse (parse-value (cdr (memq #\/ (string->list str))) '())) 0 0))
                  (- (/ (fold (reverse (parse-value (cdr (string->list str)) '())) 0 0) (fold (reverse (parse-value (cdr (memq #\/ (string->list str))) '())) 0 0))))
              (/ (fold (reverse (parse-value (string->list str) '())) 0 0) (fold (reverse (parse-value (cdr (memq #\/ (string->list str))) '())) 0 0))))))

(define (scan-many-fracs str)
  (define (parse list)
    (if (null? list)
        '()
        (if (check-frac (car list))
            (cons (scan-frac (car list)) (parse (cdr list)))
            (= 1 2)))) 
  (define (parse_values stack_number stack str)
    (cond ((and (null? str) (null? stack)) (parse stack_number))
          ((null? str) (parse (append stack_number (list (list->string stack)))))
          ((and (sep? (car str)) (not (null? stack))) (parse_values (append stack_number (list (list->string stack))) '() (cdr str)))
          ((sep? (car str)) (parse_values stack_number stack (cdr str)))
          ((or (or (digit? (car str)) (eq? (car str) #\/)) (and (null? stack) (sign? (car str)))) (parse_values stack_number (append stack (list (car str))) (cdr str)))
          (else (= 1 2))))
  (parse_values '() '() (string->list str)))


(define tests1
  (list (test (check-frac "110/111") #t)
        (test (check-frac "-4/3") #t)
        (test (check-frac "+5/10") #t)
        (test (check-frac "5.0/10") #f)
        (test (check-frac "FF/10") #f)))

(define tests2
  (list (test (scan-frac "110/111") 110/111)
        (test (scan-frac "-4/3") -4/3)
        (test (scan-frac "+5/10") 1/2)
        (test (scan-frac "5.0/10") #f)
        (test (scan-frac "FF/10") #f)))

(define tests3
  (list (test (scan-many-fracs "\t1/2 1/3\n\n10/8") '(1/2 1/3 5/4))
        (test (scan-many-fracs "\t1/2 1/3\n\n2/-5") #f)))

(display "------- Testing check-frac -------\n")
(run-tests tests1)
(display "------- Testing scan-frac -------\n")
(run-tests tests2)
(display "------- Testing scan-many-fracs -------\n")
(run-tests tests3)

; Текст программы в список 
(define (make-source seq . eof)
  (let ((a (if (not (null? eof))
               eof
               #f)))
    (cond ((string? seq) (append (string->list seq) (list a)))
          ((vector? seq) (append (vector->list seq) (list a)))
          (else (append seq (list a))))))

(define-syntax next
  (syntax-rules ()
    ((_ name) (let ((char (car name)))
                (if (and (list? (car name)) (null? (cdr name)))
                    (car char)
                    (begin (set! name (cdr name)) 
                           char))))))

(define-syntax ++
  (syntax-rules ()
    ((_ i src) (set! i (next src)))))

(define (parse vec)
  (define ERROR 1)
  (define cur 1)
  (define src (make-source vec))
  
  (define (parse-body)
    (cond ((equal? cur 'if) (list cur (let loop ((res '()))
                                        (++ cur src)
                                        (if (and cur (not (equal? cur 'endif)))
                                            (loop (cons (parse-body) res))
                                            (if (equal? cur 'endif)
                                                (reverse res)
                                                (ERROR #f))))))
          ((member cur '(end endif define)) (ERROR #f))
          ((symbol? cur) cur)
          ((number? cur) cur)
          (else (ERROR #f))))
  
  (define (parse-article)
    (cond ((equal? cur 'define) (++ cur src) (list cur (let loop ((res '()))
                                                         (++ cur src)
                                                         (if (and cur (not (equal? cur 'end)))
                                                             (loop (cons (parse-body) res))
                                                             (if (equal? cur 'end)
                                                                 (begin (++ cur src) (reverse res))
                                                                 (ERROR #f))))))
          (else #f)))
  
  (define (parse-articles)
    (let loop ((res '()))
      (if cur
          (let ((article (parse-article)))
            (if article
                (loop (cons article res))
                (reverse res)))
          (reverse res))))
  
  (define (parse-program)
    (list (parse-articles)
          (let loop ((res '()))
            (if cur
                (let ((body (parse-body)))
                  (++ cur src)
                  (loop (cons body res)))
                (reverse res)))))
  
  (begin (++ cur src)
         (call-with-current-continuation
          (lambda (exit) 
            (set! ERROR exit)
            (parse-program)))))

(define the-tests
  (list (test (parse #(1 2 +)) '(() (1 2 +)))
        (test (parse #(x dup 0 swap if drop -1 endif)) '(() (x dup 0 swap (if (drop -1)))))
        (test (parse #( define -- 1 - end
                         define =0? dup 0 = end
                         define =1? dup 1 = end
                         define factorial
                         =0? if drop 1 exit endif
                         =1? if drop 1 exit endif
                         dup --
                         factorial
                         *
                         end
                         0 factorial
                         1 factorial
                         2 factorial
                         3 factorial
                         4 factorial )) '(((-- (1 -))
                                           (=0? (dup 0 =))
                                           (=1? (dup 1 =))
                                           (factorial
                                            (=0? (if (drop 1 exit)) =1? (if (drop 1 exit)) dup -- factorial *)))
                                          (0 factorial 1 factorial 2 factorial 3 factorial 4 factorial)))
        (test (parse #(define word w1 w2 w3)) #f)
        (test (parse #(define if end endif)) #f)
        (test (parse #(define end endif)) #f)
        (test (parse #(define X if end endif)) #f)))

(display "------ Testing parse ------\n")
(run-tests the-tests)